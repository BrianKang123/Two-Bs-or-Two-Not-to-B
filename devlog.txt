Two Bs or Not To B
Brain Wang
Ethan Lam
Brian Kang
pd 6
---------------------
<UNO>


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
USAGE:
* Replace all fields, angle brackets included, with specified info.
  eg, pd <pd#> --> pd 3
* Delete this instruction block once all teammates understand usage.

devlog--
Use keyboard shortcut to jump to end,
 replicate entry template,
 modify appropriately.

zone of reflection--
Flesh out each category whenever necessary, appropriate.
 Need not be fully filled in until end of project,
 but best done as you go along.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


/////////// Zone of Reflection \\\\\\\\\\\
------------------------------------------
OBSTACLES OVERCOME
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wow we so BOSS bc...

UNRESOLVED ISSUES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
blah blah pesky bug...
maybe some of these will move into the Obs.Ovrcm section...

COOL STUFF LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
wow! oo!...

MID-DEVELOPMENT DESIGN CHANGES
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
we changed ___ to ___ bc...

LESSONS LEARNED
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
tales of wisdom gained...
||||||||||||||||||||||||||||||||||||||||||



 ______   ______   __   __   __       ______   _______
/_____/\ /_____/\ /_/\ /_/\ /_/\     /_____/\ /______/\
\:::_ \ \\::::_\/_\:\ \\ \ \\:\ \    \:::_ \ \\::::__\/__
 \:\ \ \ \\:\/___/\\:\ \\ \ \\:\ \    \:\ \ \ \\:\ /____/\
  \:\ \ \ \\::___\/_\:\_/.:\ \\:\ \____\:\ \ \ \\:\\_  _\/
   \:\/.:| |\:\____/\\ ..::/ / \:\/___/\\:\_\ \ \\:\_\ \ \
    \____/_/ \_____\/ \___/_(   \_____\/ \_____\/ \_____\/
==============================================================


yyyy-mm-dd
--------------------------------------------------------------
<Member> :: <Thing member did.>
<Member> :: <Thing member did.>
<Member> :: <Thing member did.>
==============================================================

2022-05-24
--------------------------------------------------------------
Brian Kang :: Shared repo, created README
Brian Wang:: Worked on v0 of the rps game
==============================================================

2022-05-25
--------------------------------------------------------------
Brian Wang :: Implemented working version of a basic rock paper scissors game
Ethan Lam :: Created devlog

2022-05-26
--------------------------------------------------------------
Brian Kang :: Created and edited Propro.pdf goog doc
Ethan Lam :: Edited Propro.pdf on keys
             Uploaded flag.jpg
Brian Wang:: Worked on v1 of the rps game (implement scanner)

2022-05-27
--------------------------------------------------------------
Brian Wang :: Worked on v2 of the rps game (begin frame of weights and machine learning)
Ethan Lam :: Work on UML diagram hardcopy
Brian Kang:: Updated .gitignore with "value-added" version

2022-05-30
--------------------------------------------------------------
I forgor :skull:
Brian Wang :: implemented part of the weight system for use by Gilgamesh
              Maybe overall weights can be dynamically adjusted by past play accuracies?

2022-05-31
--------------------------------------------------------------
Brian Wang :: Gilgamesh finished?
              Lots of bugs squashed. Biggest bug was some problems with doubles and how they work.
              Weird that Gilgamesh AI only really starts kicking in after 10 moves? it should be 5. I'll look into it.
              Gilgamesh seems to win at around a 30 to 50% winrate against more "random" moves, with the player hovering around 10% to 20% lower. That is pretty good.
              The main problem is the slow learning time that costs a lot of wins.
              This could be solved with dynamic weights for the importance of 1, 2, 3, 4, and 5 move patterns, but that is too smart for Gilgamesh.
              I think that needs to be put into an even smarter bot, Enkidu.
              Also made bad inputs more forgiving.
Brian Kang :: Edited READ.md File with Bot Instructions
Ethan Lam :: Worked on v3 of the rps game
Everyone :: Worked on FlowChart

2022-06-01
--------------------------------------------------------------
Brian Wang :: Worked on v4 of the rps game, Enkidu, as described before. However, the new weight rebalancing system might not be working properly.
              I might port the weight sets as attributes to the bot and then instead have another whole method.
Brian Kang:: Worked on v6 of the rps game (Cheater Bot)
Ethan Lam :: Eobard (v3) created, tested, uses past # of move to figure out %s

2022-06-02
--------------------------------------------------------------
Brian Wang :: rps updated to accomodate lists of moves instead of just single moves
Ethan Lam :: Tested many rps games in order to test performance
Brian Kang :: Worked on v6 of the rps game (Cheater Bot- Anticipates your moves and wins no matter what)

2022-06-03
--------------------------------------------------------------
Brian Wang :: Updated driver files for all versions to be more compatible
              Began work on v5 (Sal), v4 (Enkidu) but loses instead
Brian Kang :: Worked on v6 of the rps game (Sol)

2022-06-06
--------------------------------------------------------------
Brian Wang :: Created Master, allows running of all bots from one folder.
              All bots also modified to comply with master.
              Need to implement rpsDriver more.
Ethan Lam :: Ideas, to implement:
                Gauntlet
                Win/lose quotes
                Storylines (implement more story)
                Inform player of bot behavior
                move log
Brian Kang :: V7 done, v9 started
